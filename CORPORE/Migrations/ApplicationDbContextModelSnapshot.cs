// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Migrations
{
    /// <summary>
    /// Snapshot do modelo para o contexto ApplicationDbContext.
    /// </summary>
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        /// <inheritdoc />
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            // Configurações gerais do modelo
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            // Configuração para uso de colunas de identidade no SQL Server
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // Entidade OperadorModel
            modelBuilder.Entity("CRUD_API.Models.OperadorModel", b =>
            {
                // Configuração da propriedade Id
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                // Configuração da propriedade DataAlteracao
                b.Property<DateTime?>("DataAlteracao")
                    .HasColumnType("datetime2");

                // Configuração da propriedade DataInclusao
                b.Property<DateTime>("DataInclusao")
                    .HasColumnType("datetime2");

                // Configuração da propriedade Funcao
                b.Property<int>("Funcao")
                    .HasColumnType("int");

                // Configuração da propriedade Nome
                b.Property<string>("Nome")
                    .HasColumnType("nvarchar(max)");

                // Configuração da propriedade Status
                b.Property<bool>("Status")
                    .HasColumnType("bit");

                // Configuração da propriedade Turno
                b.Property<int>("Turno")
                    .HasColumnType("int");

                // Configuração da chave primária
                b.HasKey("Id");

                // Configuração do nome da tabela
                b.ToTable("Operadores");
            });

            // Entidade OrdemServicoModel
            modelBuilder.Entity("CRUD_API.Models.OrdemServicoModel", b =>
            {
                // Configuração da propriedade Id
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                // Configuração da propriedade DataConclusao
                b.Property<DateTime?>("DataConclusao")
                    .HasColumnType("datetime2");

                // Configuração da propriedade DataInicio
                b.Property<DateTime>("DataInicio")
                    .HasColumnType("datetime2");

                // Configuração da propriedade Descricao
                b.Property<string>("Descricao")
                    .HasColumnType("nvarchar(max)");

                // Configuração da propriedade Maquina
                b.Property<string>("Maquina")
                    .HasColumnType("nvarchar(max)");

                // Configuração da propriedade OperadorId
                b.Property<int>("OperadorId")
                    .HasColumnType("int");

                // Configuração da chave primária
                b.HasKey("Id");

                // Configuração do índice para a chave estrangeira OperadorId
                b.HasIndex("OperadorId");

                // Configuração do nome da tabela
                b.ToTable("OrdensServico");
            });

            // Relacionamento entre as entidades OperadorModel e OrdemServicoModel
            modelBuilder.Entity("CRUD_API.Models.OrdemServicoModel", b =>
            {
                b.HasOne("CRUD_API.Models.OperadorModel", "Operador")
                    .WithMany()
                    .HasForeignKey("OperadorId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                // Configuração da navegação para a propriedade de navegação Operador
                b.Navigation("Operador");
            });
#pragma warning restore 612, 618
        }
    }
}
